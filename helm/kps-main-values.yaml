## https://github.com/prometheus-community/helm-charts/tree/main/charts
grafana:
  enabled: false


# nameOverride: kps
fullnameOverride: kps 


prometheus:
  service:
    enabled: true
    type: NodePort

  # Service for thanos service discovery on sidecar
  # Enable this can make Thanos Query can use
  # `--store=dnssrv+_grpc._tcp.${kube-prometheus-stack.fullname}-thanos-discovery.${namespace}.svc.cluster.local` to discovery
  # Thanos sidecar on prometheus nodes
  # (Please remember to change ${kube-prometheus-stack.fullname} and ${namespace}. Not just copy and paste!)
  thanosService:
    enabled: true
    # annotations: {}
    # labels: {}
    # ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    # externalTrafficPolicy: Cluster
    # ## Service type
    # type: ClusterIP
    # ## gRPC port config
    # portName: grpc
    # port: 10901
    # targetPort: "grpc"
    # ## HTTP port config (for metrics)
    # httpPortName: http
    # httpPort: 10902
    # targetHttpPort: "http"
    # ## ClusterIP to assign
    # # Default is to make this a headless service ("None")
    # clusterIP: "None"
    # ## Port to expose on each node, if service type is NodePort
    # nodePort: 30901
    # httpNodePort: 30902
  # ServiceMonitor to scrape Sidecar metrics
  # Needs thanosService to be enabled as well
  thanosServiceMonitor:
    enabled: true
    # interval: ""
    # ## Additional labels
    # additionalLabels: {}
    # ## scheme: HTTP scheme to use for scraping. Can be used with `tlsConfig` for example if using istio mTLS.
    # scheme: ""
    # ## tlsConfig: TLS configuration to use when scraping the endpoint. For example if using istio mTLS.
    # ## Of type: https://github.com/coreos/prometheus-operator/blob/main/Documentation/api.md#tlsconfig
    # tlsConfig: {}
    # bearerTokenFile:
    # ## Metric relabel configs to apply to samples before ingestion.
    # metricRelabelings: []
    # ## relabel configs to apply to samples before ingestion.
    # relabelings: []
  # Service for external access to sidecar
  # Enabling this creates a service to expose thanos-sidecar outside the cluster.
  thanosServiceExternal:
    enabled: true
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "external" # use lbc
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      # service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing # only for test    
    # labels: {}
    # loadBalancerIP: ""
    # loadBalancerSourceRanges: []
    # ## gRPC port config
    # portName: grpc
    # port: 10901
    # targetPort: "grpc"
    # ## HTTP port config (for metrics)
    # httpPortName: http
    # httpPort: 10902
    # targetHttpPort: "http"
    # ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    # externalTrafficPolicy: Cluster
    # ## Port to expose on each node
    # nodePort: 30901
    # httpNodePort: 30902

  prometheusSpec:
    nodeSelector:
      role: system
    scrapeInterval: "30s" # Defaults to 30s
    scrapeTimeout: "10s" # Number of seconds to wait for target to respond before erroring
    evaluationInterval: "1m" # Interval between consecutive evaluations.
    ## External labels to add to any time series or alerts when communicating with external systems
    externalLabels: 
      cluster: ${EKS_CLUSTER_NAME}
    image:
      registry: quay.io
      repository: prometheus/prometheus
    serviceMonitorSelectorNilUsesHelmValues: true
    retention: "15d" # How long to retain metrics
    storageSpec:
    ## https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi # 联动 retention 的配置，合理设置大小
    ## EnableAdminAPI enables Prometheus the administrative HTTP API which includes functionality such as deleting time series.
    ## This is disabled by default.
    ## ref: https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
    ##
    enableAdminAPI: true
    ## If true, pass --storage.tsdb.max-block-duration=2h to prometheus. This is already done if using Thanos
    ##
    disableCompaction: true              
    ## Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment.
    ## This section is experimental, it may change significantly without deprecation notice in any release.
    ## This is experimental and may change significantly without backward compatibility in any release.
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#thanosspec
    ## 注意 kube-prometheus-stack 里的 thanos 还是实验状态
    ## 启用 Thanos sidecar，将 Prometheus 的指标数据上传到长期存储 S3，并允许 Thanos 查询 Prometheus 的最新指标数据
    ## https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/thanos.md
    thanos:
      image: quay.io/thanos/thanos:v0.32.2
      # version: "v0.32.2"
      objectStorageConfig: # 需要提前创建 secret `kps-thanos-objstore`
        name: "thanos-objstore-secret"
        key: "thanos.yaml"
      # objectStorageConfigFile: /var/secrets/object-store.yaml

    additionalScrapeConfigs: |
      - job_name: karpenter
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - karpenter
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          regex: http-metrics
          action: keep


alertmanager:
  enabled: true
  alertmanagerSpec:
    nodeSelector:
      role: system
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
